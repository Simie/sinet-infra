version: "3.3"

networks:
  default:
    driver: bridge
  traefik: # Network used to allow traefiq to talk to other containers. Any container that traefik is proxying needs to be on this network or on host network.
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: veth_traefik # give it a specific name so we can add to trusted interfaces in the firewall (configuration.nix)
    ipam:
      driver: default
      config:
        - subnet: 172.100.0.0/16
  internal:
    name: z_internal # Z_ prefix makes it alphabetically after traefik, so traefik is used as the default route when accessing the host. (ugh)

services:

###
## traefik
###

  traefik:
    image: "traefik:v3.0"
    container_name: "traefik"
    hostname: "traefik"
    networks:
      #default:
      internal:
      traefik:
        ipv4_address: 172.100.1.2 # Fixed IP so it can be allowed by services with trusted reverse proxy lists
      #macvlan-lan:
      #  ipv4_address: 192.168.2.2
    extra_hosts:
      - "host.docker.internal:host-gateway" # Communicate with host (For HASS)
    env_file: 
      - settings.env
    restart: unless-stopped
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--providers.docker.network=infra_traefik" # Otherwise it sometimes tries to use internal network to talk to host, which breaks firewall allowing access to host from this containers fixed ip

      - "--certificatesresolvers.sinetresolver.acme.dnschallenge=true"
      - "--certificatesresolvers.sinetresolver.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.sinetresolver.acme.email=me@simonmoles.com"
      - "--certificatesresolvers.sinetresolver.acme.storage=/letsencrypt/acme.json"
    labels:
      - "traefik.enable=true"

      # Default redirect any http request -> https
      - "traefik.http.middlewares.https_redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https_redirect.redirectscheme.permanent=true"

      - "traefik.http.routers.default_http.rule=HostRegexp(`^.+\\.sinet\\.uk$`)"
      - "traefik.http.routers.default_http.entrypoints=web"
      - "traefik.http.routers.default_http.middlewares=https_redirect"
      - "traefik.http.routers.default_http.priority=1" # Set priority as low as possible so doesn't take precedence over individual container-defined http routes
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "$SI_DOCKERDIR/traefik/letsencrypt:/letsencrypt"

###
## DB Services for authentik
###

  postgresql:
    image: docker.io/library/postgres:12-alpine
    restart: unless-stopped
    env_file: 
      - settings.env
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - "$SI_DOCKERDIR/authentik/database:/var/lib/postgresql/data"
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}

  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data

###
## Authentik
###

  authentik_server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.4.2}
    restart: unless-stopped
    command: server
    networks:
      - traefik
      - internal
    env_file: 
      - settings.env
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
     
    volumes:
      - $SI_DOCKERDIR/authentik/media:/media
      - $SI_DOCKERDIR/authentik/custom-templates:/templates
    ports:
      - "${COMPOSE_PORT_HTTP:-9000}:9000"
      - "${COMPOSE_PORT_HTTPS:-9443}:9443"
    depends_on:
      - postgresql
      - redis
    labels:
      - "traefik.enable=true"
      ## HTTPS Routers
      - "traefik.http.routers.authentik-rtr.rule=Host(`$AUTHENTIK_HOST`)"
      - "traefik.http.routers.authentik-rtr.tls=true"
      - "traefik.http.routers.authentik-rtr.tls.certresolver=sinetresolver"
      ## Individual Application forwardAuth regex (catch any subdomain using individual application forwardAuth)  
      - "traefik.http.routers.authentik-rtr-outpost.rule=HostRegexp(`{subdomain:[a-z0-9-]+}.$SI_DOMAIN`) && PathPrefix(`/outpost.goauthentik.io/`)"
      - "traefik.http.routers.authentik-rtr-outpost.entrypoints=websecure"
      - "traefik.http.routers.authentik-rtr-outpost.tls=true"
      - "traefik.http.routers.authentik-rtr-outpost.tls.certresolver=sinetresolver"
      ## HTTP Services
      - "traefik.http.routers.authentik-rtr.service=authentik-svc"
      - "traefik.http.services.authentik-svc.loadBalancer.server.port=9000"
      ## Setup Authentik middleware
      - "traefik.http.middlewares.authentik.forwardauth.address=http://authentik_server:9000/outpost.goauthentik.io/auth/traefik"
      - "traefik.http.middlewares.authentik.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.authentik.forwardauth.authResponseHeaders=X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version"
      #- "traefik.http.middlewares.authentik.forwardauth.authResponseHeadersRegex=^X-authentik-"

  authentik_worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.4.2}
    restart: unless-stopped
    command: worker
    env_file: 
      - settings.env
    networks:
      - traefik
      - internal
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $SI_DOCKERDIR/authentik/media:/media
      - $SI_DOCKERDIR/authentik/certs:/certs
      - $SI_DOCKERDIR/authentik/custom-templates:/templates
    depends_on:
      - postgresql
      - redis

###
## Test Endpoints
###
  
  whoami-insecure:
    image: "traefik/whoami"
    container_name: "whoami-insecure"
    restart: unless-stopped
    networks:
      - traefik
    env_file: 
      - settings.env
    labels:
      - "traefik.enable=true"
      # HTTP
      - "traefik.http.routers.whoami-insecure-web.rule=Host(`whoami.$SI_DOMAIN`)"
      - "traefik.http.routers.whoami-insecure-web.entrypoints=web"
      # HTTPS
      - "traefik.http.routers.whoami-insecure-websecure.rule=Host(`whoami.$SI_DOMAIN`)"
      - "traefik.http.routers.whoami-insecure-websecure.entrypoints=websecure"
      - "traefik.http.routers.whoami-insecure-websecure.tls.certresolver=sinetresolver"

  whoami-secure:
    image: traefik/whoami
    container_name: whoami-secure
    restart: unless-stopped
    env_file: 
      - settings.env
    security_opt:
      - no-new-privileges:true
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      ## HTTPS Routers
      - "traefik.http.routers.whoami-secure-websecure.rule=Host(`whoami-secure.$SI_DOMAIN`)"
      - "traefik.http.routers.whoami-secure-websecure.entrypoints=websecure"
      - "traefik.http.routers.whoami-secure-websecure.tls=true"
      - "traefik.http.routers.whoami-secure-websecure.tls.certresolver=sinetresolver"
      ## Middlewares
      - "traefik.http.routers.whoami-secure-websecure.middlewares=authentik"

volumes:
  redis:
    driver: local