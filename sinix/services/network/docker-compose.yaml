networks:
  default:
    driver: bridge

  traefik: 
    name: traefik
    external: true 

  internal: 
    driver: bridge
    internal: true 

services:

###
## Network DNS
###

  dns-server:
    container_name: dns-server
    hostname: dns
    image: technitium/dns-server:latest
    # For DHCP deployments, use "host" network mode and remove all the port mappings, including the ports array by commenting them
    # network_mode: "host"
    networks:
     - default
     - traefik
    ports:
      #- "5380:5380/tcp" #DNS web console (HTTP)
      # - "53443:53443/tcp" #DNS web console (HTTPS)
      - "53:53/udp" #DNS service
      - "53:53/tcp" #DNS service
      # - "853:853/udp" #DNS-over-QUIC service
      # - "853:853/tcp" #DNS-over-TLS service
      # - "443:443/udp" #DNS-over-HTTPS service (HTTP/3)
      # - "443:443/tcp" #DNS-over-HTTPS service (HTTP/1.1, HTTP/2)
      # - "80:80/tcp" #DNS-over-HTTP service (use with reverse proxy or certbot certificate renewal)
      # - "8053:8053/tcp" #DNS-over-HTTP service (use with reverse proxy)
      # - "67:67/udp" #DHCP service      
    environment:
      - DNS_SERVER_DOMAIN=${DNS_HOST} #The primary domain name used by this DNS Server to identify itself.
      # - DNS_SERVER_ADMIN_PASSWORD=password #DNS web console admin user password.
      # - DNS_SERVER_ADMIN_PASSWORD_FILE=password.txt #The path to a file that contains a plain text password for the DNS web console admin user.
      # - DNS_SERVER_PREFER_IPV6=false #DNS Server will use IPv6 for querying whenever possible with this option enabled.
      # - DNS_SERVER_WEB_SERVICE_LOCAL_ADDRESSES=172.17.0.1,127.0.0.1 #Comma separated list of network interface IP addresses that you want the web service to listen on for requests. The "172.17.0.1" address is the built-in Docker bridge. The "[::]" is the default value if not specified. Note! This must be used only with "host" network mode.
      - DNS_SERVER_WEB_SERVICE_HTTP_PORT=5380 #The TCP port number for the DNS web console over HTTP protocol.
      # - DNS_SERVER_WEB_SERVICE_HTTPS_PORT=53443 #The TCP port number for the DNS web console over HTTPS protocol.
      # - DNS_SERVER_WEB_SERVICE_ENABLE_HTTPS=false #Enables HTTPS for the DNS web console.
      # - DNS_SERVER_WEB_SERVICE_USE_SELF_SIGNED_CERT=false #Enables self signed TLS certificate for the DNS web console.
      # - DNS_SERVER_OPTIONAL_PROTOCOL_DNS_OVER_HTTP=false #Enables DNS server optional protocol DNS-over-HTTP on TCP port 8053 to be used with a TLS terminating reverse proxy like nginx.
      # - DNS_SERVER_RECURSION=AllowOnlyForPrivateNetworks #Recursion options: Allow, Deny, AllowOnlyForPrivateNetworks, UseSpecifiedNetworks.
      # - DNS_SERVER_RECURSION_DENIED_NETWORKS=1.1.1.0/24 #Comma separated list of IP addresses or network addresses to deny recursion. Valid only for `UseSpecifiedNetworks` recursion option.
      # - DNS_SERVER_RECURSION_ALLOWED_NETWORKS=127.0.0.1, 192.168.1.0/24 #Comma separated list of IP addresses or network addresses to allow recursion. Valid only for `UseSpecifiedNetworks` recursion option.
      # - DNS_SERVER_ENABLE_BLOCKING=false #Sets the DNS server to block domain names using Blocked Zone and Block List Zone.
      # - DNS_SERVER_ALLOW_TXT_BLOCKING_REPORT=false #Specifies if the DNS Server should respond with TXT records containing a blocked domain report for TXT type requests.
      # - DNS_SERVER_BLOCK_LIST_URLS= #A comma separated list of block list URLs.
      # - DNS_SERVER_FORWARDERS=1.1.1.1, 8.8.8.8 #Comma separated list of forwarder addresses.
      # - DNS_SERVER_FORWARDER_PROTOCOL=Tcp #Forwarder protocol options: Udp, Tcp, Tls, Https, HttpsJson.
      # - DNS_SERVER_LOG_USING_LOCAL_TIME=true #Enable this option to use local time instead of UTC for logging.
    env_file: settings.env
    volumes:
      - "$SI_DOCKERDIR/stack-network/dns/config:/etc/dns"
    restart: unless-stopped
    sysctls:
      - net.ipv4.ip_local_port_range=1024 65000
    labels:
      - "logging=promtail"
      - "logging_jobname=dns"

      - "traefik.enable=true"
      ## HTTPS Routers
      - "traefik.http.routers.dns-websecure.rule=Host(`${DNS_HOST}`)"
      - "traefik.http.routers.dns-websecure.tls=true"
      - "traefik.http.routers.dns-websecure.tls.certresolver=sinetresolver"
      - "traefik.http.routers.dns-websecure.entrypoints=websecure"
      - "traefik.http.services.dns-websecure.loadBalancer.server.port=5380"

###
## Unifi Controller
###

# TODO

  unifi-db:
    image: docker.io/mongo:7.0-jammy
    container_name: unifi-db
    networks:
      - internal
    env_file: settings.env
    volumes:
      - "$SI_DOCKERDIR/stack-network/unifi/db:/data/db"
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    restart: unless-stopped

  # mongo-express:
  #   image: mongo-express
  #   restart: always
  #   ports:
  #     - 8081:8081
  #   networks:
  #     - internal
  #     - default
  #     - traefik
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: unifi
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: unifi
  #     ME_CONFIG_MONGODB_URL: mongodb://unifi:unifi@unifi-db:27017/
  #     ME_CONFIG_BASICAUTH: false

  unifi-network-application:
    image: lscr.io/linuxserver/unifi-network-application:latest
    container_name: unifi-network-application
    networks:
      - internal
      - default
      - traefik
    depends_on:
      - unifi-db
    env_file: settings.env
    environment:
      - PUID=${SI_DOCKER_APP_USER}
      - PGID=${SI_DOCKER_APP_GROUP}
      - MEM_LIMIT=1024
      - MEM_STARTUP=1024
    volumes:
      - "$SI_DOCKERDIR/stack-network/unifi/config:/config"
    ports:
      #- 8443:8443 # Web UI
      - 3478:3478/udp # STUN port
      - 10001:10001/udp # Required for AP discovery
      - 8080:8080 # device communication
      - 6789:6789 # Mobile throughput test
      #- 1900:1900/udp
      - 8843:8843
      - 8880:8880
      - 6789:6789
      - 5514:5514/udp
    restart: unless-stopped
    labels:
      - "logging=promtail"
      - "logging_jobname=unifi"

      - "traefik.enable=true"
      ## HTTPS Routers
      - "traefik.http.routers.unifi-websecure.rule=Host(`unifi-staging.${SI_DOMAIN}`)"
      - "traefik.http.routers.unifi-websecure.tls=true"
      - "traefik.http.routers.unifi-websecure.tls.certresolver=sinetresolver"
      - "traefik.http.routers.unifi-websecure.entrypoints=websecure"

      # Can't seem to make this work- it can never find the transport (whether in file config or label config)
      # For now just put insecureSkipVerify traefik static config.
      #- "traefik.http.serversTransports.ignorecerttransport.insecureSkipVerify=true"
      #- "traefik.http.services.unifi-websecure.loadbalancer.serverstransport=ignorecerttransport"
      - "traefik.http.services.unifi-websecure.loadbalancer.server.scheme=https"
      - "traefik.http.services.unifi-websecure.loadBalancer.server.port=8443"
